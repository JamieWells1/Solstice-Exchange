name: Auto Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ github.ref_name }}
      SUMMARY_PREFIX: "Auto-generated summary for"

    steps:
      - uses: actions/checkout@v4

      - name: Install OpenAI dependency
        run: pip install --quiet --upgrade openai

      # ==============================================================
      # STEP 1: AI generates section content (multi-line safe)
      # ==============================================================

      - name: Generate AI release content
        id: ai_release
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -Eeuo pipefail

          # --- Tag range resolution ---
          # Extract current tag from GitHub ref
          CURR_TAG=${GITHUB_REF#refs/tags/}

          # Find previous tag (the one before the current one)
          PREV_TAG=$(git tag --sort=-creatordate | grep -A1 "^$CURR_TAG$" | tail -n1 || true)

          # Determine comparison range
          if [ -z "$PREV_TAG" ]; then
            echo "No previous tag found; using first commit as start."
            FIRST_COMMIT=$(git rev-list --max-parents=0 HEAD)
            RANGE="$FIRST_COMMIT..$CURR_TAG"
          else
            RANGE="$PREV_TAG..$CURR_TAG"
          fi

          # Collect commit messages and code diffs
          git log "$RANGE" --pretty=format:"%h %s" > commits.txt
          git diff "$RANGE" > diff.txt

          # --- AI release note generation ---
          python3 <<'PYCODE'
          import os, json
          from openai import OpenAI

          api_key = os.getenv("OPENAI_API_KEY")
          client = OpenAI(api_key=api_key)

          commits = open("commits.txt").read()
          diff = open("diff.txt").read()
          tag = os.getenv("GITHUB_REF_NAME", "unknown")

          prompt = f"""
          You are an expert software release analyst.

          You will be given:
          1. Commit messages (developer intent hints)
          2. Full code diff (objective source of truth)

          Your task:
          Produce strictly factual, concise release notes describing only what is verifiably present in the diff.

          ### Output JSON Keys
          ["SHORT_TITLE", "SUMMARY", "FEATURE_GROUP", "DETAILS", "ENHANCEMENTS", "BUG_DESCRIPTIONS", "DOC_UPDATES"]

          ### Hard Rules
          - Never infer or assume functionality not directly shown in the diff.
          - Mention a feature/module only if it clearly appears in the diff (file paths, identifiers, comments).
          - Ignore commit messages that describe work not reflected in the diff.
          - If the diff mostly moves/renames files, treat it as a structural reorganization.
          - Exclude trivial edits: formatting, imports, comments, or whitespace changes.
          - Only include significant, user-visible, or structural changes.
          - Merge related small edits into single concise bullets.
          - Each bullet must communicate meaningful impact.
          - Keep SHORT_TITLE ≤ 8 words; SUMMARY ≤ 3 sentences.
          - Output valid JSON only (no code fences, no markdown commentary).

          ### Prioritization Order
          1. Identify dominant change type (refactor, feature, bug fix, doc update).
          2. Summarize that as SHORT_TITLE and SUMMARY.
          3. Group verified edits under correct sections.

          Context:
          Version: {tag}

          ## Commit Messages
          {commits}

          ## Diff
          {diff}
          """

          resp = client.chat.completions.create(
              model="gpt-4o-mini",
              messages=[
                  {"role": "system", "content": "You produce strictly factual JSON release notes."},
                  {"role": "user", "content": prompt},
              ],
          )

          content = resp.choices[0].message.content

          if not content:
              raise RuntimeError("OpenAI response was empty or invalid")

          if isinstance(content, list):
              text = "".join(part.get("text", "") for part in content if isinstance(part, dict))
          else:
              text = str(content)

          text = text.replace('```json', '').replace('```', '').strip()

          if not text:
              raise RuntimeError("Empty text after cleanup — model returned no content")

          try:
              data = json.loads(text)
          except json.JSONDecodeError as e:
              raise RuntimeError(f"Failed to parse JSON from model output:\n{text}\nError: {e}")

          # Write each key into GitHub Actions env vars
          with open(os.getenv("GITHUB_ENV"), "a") as envfile:
              for key, value in data.items():
                  value = value.replace("%", "%%")  # protect against % expansion
                  envfile.write(f"{key}<<EOF\n{value}\nEOF\n")
          PYCODE

      # ==============================================================
      # STEP 2: Substitute the placeholders with AI output
      # ==============================================================

      - name: Populate template with AI output (multiline safe)
        id: populate
        run: |
          set -Eeuo pipefail
          cp .github/RELEASE_TEMPLATE.md release_notes.md

          awk -v VERSION="$VERSION" \
              -v SHORT_TITLE="$SHORT_TITLE" \
              -v SUMMARY="$SUMMARY" \
              -v FEATURE_GROUP="$FEATURE_GROUP" \
              -v DETAILS="$DETAILS" \
              -v ENHANCEMENTS="$ENHANCEMENTS" \
              -v BUG_DESCRIPTIONS="$BUG_DESCRIPTIONS" \
              -v DOC_UPDATES="$DOC_UPDATES" '
              {
                gsub(/\{\{VERSION\}\}/, VERSION);
                gsub(/\{\{SHORT_TITLE\}\}/, SHORT_TITLE);
                gsub(/\{\{SUMMARY\}\}/, SUMMARY);
                gsub(/\{\{FEATURE_GROUP\}\}/, FEATURE_GROUP);
                gsub(/\{\{DETAILS\}\}/, DETAILS);
                gsub(/\{\{ENHANCEMENTS\}\}/, ENHANCEMENTS);
                gsub(/\{\{BUG_DESCRIPTIONS\}\}/, BUG_DESCRIPTIONS);
                gsub(/\{\{DOC_UPDATES\}\}/, DOC_UPDATES);
                print;
              }' release_notes.md > release_notes_filled.md

          mv release_notes_filled.md release_notes.md

      # ==============================================================
      # STEP 3: Publish Release
      # ==============================================================

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: release_notes.md
          draft: false
          prerelease: false

  # ==============================================================
  # STEP 4: Reset Workflow
  # ==============================================================

  reset_placeholders:
    runs-on: ubuntu-latest
    needs: release
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Restore placeholder workflow
        run: |
          set -Eeuo pipefail
          git fetch origin main
          git checkout origin/main -- .github/workflows/auto-release.yml || true
          echo "✓ Workflow restored to placeholder defaults."

      - name: Commit and push reset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if [ -n "$(git status --porcelain)" ]; then
            git add .github/workflows/auto-release.yml
            git commit -m "Reset auto-release.yml to placeholder defaults"
            git push origin HEAD:main
          else
            echo "No workflow changes to reset."
          fi
