name: Auto Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ github.ref_name }}
      SUMMARY_PREFIX: "Auto-generated summary for"

    steps:
      - uses: actions/checkout@v4

      - name: Install OpenAI dependency
        run: pip install --quiet --upgrade openai

      - name: Generate AI release summary
        id: ai_release
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -Eeuo pipefail
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          CURR_TAG=${GITHUB_REF#refs/tags/}

          if [ -n "$PREV_TAG" ]; then
            git log "$PREV_TAG".."$CURR_TAG" --pretty=format:"%h %s" > commits.txt
            git diff --stat "$PREV_TAG".."$CURR_TAG" > diffstat.txt
          else
            git log -n 50 --pretty=format:"%h %s" > commits.txt
            git diff --stat > diffstat.txt
          fi

          python3 <<'PYCODE'
          import os, re
          from openai import OpenAI

          api_key = os.getenv("OPENAI_API_KEY")
          commits = open("commits.txt").read()
          diffstat = open("diffstat.txt").read()
          tag = os.getenv("GITHUB_REF_NAME", "unknown")

          client = OpenAI(api_key=api_key)
          prompt = f"""
          Generate concise, developer-focused GitHub release notes for {tag}.
          Include sections: Summary, What's New, Enhancements, Bug Fixes, Documentation Updates.
          Provide bullet points and keep tone technical.
          Commits:
          {commits}
          Diff summary:
          {diffstat}
          """

          resp = client.chat.completions.create(
              model="gpt-4o-mini",
              messages=[
                  {"role": "system", "content": "You write clean, factual software release notes."},
                  {"role": "user", "content": prompt},
              ],
          )
          text = resp.choices[0].message.content.strip()
          with open("ai_release_notes.md", "w") as f:
              f.write(text)
          PYCODE

      - name: Inject OpenAI response into environment
        id: inject
        run: |
          set -Eeuo pipefail

          extract_section () {
            # Handles final section too (no trailing ##)
            awk "/^## $1/{flag=1;next}/^## /{flag=0}flag" ai_release_notes.md | sed '/^$/d'
          }

          SUMMARY=$(extract_section "Summary" | tr '\n' ' ')
          WHATS_NEW=$(extract_section "What's New" | tr '\n' ' ')
          ENHANCEMENTS=$(extract_section "Enhancements" | tr '\n' ' ')
          BUG_FIXES=$(extract_section "Bug Fixes" | tr '\n' ' ')
          DOC_UPDATES=$(extract_section "Documentation Updates" | tr '\n' ' ')

          {
            echo "SUMMARY=$SUMMARY"
            echo "WHATS_NEW=$WHATS_NEW"
            echo "ENHANCEMENTS=$ENHANCEMENTS"
            echo "BUG_FIXES=$BUG_FIXES"
            echo "DOC_UPDATES=$DOC_UPDATES"
          } >> "$GITHUB_ENV"

      - name: Populate release notes template
        id: populate
        run: |
          set -Eeuo pipefail

          sed -e "s|{{VERSION}}|${VERSION}|g" \
              -e "s|{{SUMMARY}}|${SUMMARY}|g" \
              -e "s|{{FEATURE_GROUP_1}}|${WHATS_NEW}|g" \
              -e "s|{{ENHANCEMENT_1}}|${ENHANCEMENTS}|g" \
              -e "s|{{BUG_DESCRIPTION_1}}|${BUG_FIXES}|g" \
              -e "s|{{DOC_UPDATE_1}}|${DOC_UPDATES}|g" \
              .github/RELEASE_TEMPLATE.md > release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: release_notes.md
          draft: false
          prerelease: false

  reset_placeholders:
    runs-on: ubuntu-latest
    needs: release
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Restore placeholder workflow
        run: |
          set -Eeuo pipefail
          git fetch origin main
          git checkout origin/main -- .github/workflows/auto-release.yml || true
          echo "âœ“ Workflow restored to placeholder defaults."

      - name: Commit and push reset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if [ -n "$(git status --porcelain)" ]; then
            git add .github/workflows/auto-release.yml
            git commit -m "Reset auto-release.yml to placeholder defaults"
            git push origin HEAD:main
          else
            echo "No workflow changes to reset."
          fi
