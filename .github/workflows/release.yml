name: Auto Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ github.ref_name }}
      SUMMARY_PREFIX: "Auto-generated summary for"

    steps:
      - uses: actions/checkout@v4

      - name: Install OpenAI dependency
        run: pip install --quiet --upgrade openai

      # ==============================================================
      # STEP 1: AI generates section content (multi-line safe)
      # ==============================================================

      - name: Generate AI release content
        id: ai_release
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -Eeuo pipefail
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          CURR_TAG=${GITHUB_REF#refs/tags/}

          if [ -n "$PREV_TAG" ]; then
            git log "$PREV_TAG".."$CURR_TAG" --pretty=format:"%h %s" > commits.txt
            git diff "$PREV_TAG".."$CURR_TAG" > diff.txt
          else
            git log --pretty=format:"%h %s" > commits.txt
            # Get diff from first commit to HEAD
            FIRST_COMMIT=$(git rev-list --max-parents=0 HEAD)
            git diff "$FIRST_COMMIT"..HEAD > diff.txt
          fi

          python3 <<'PYCODE'
          import os, json, textwrap
          from openai import OpenAI

          api_key = os.getenv("OPENAI_API_KEY")
          client = OpenAI(api_key=api_key)

          commits = open("commits.txt").read()
          diff = open("diff.txt").read()
          tag = os.getenv("GITHUB_REF_NAME", "unknown")

          prompt = f"""
          You are an expert technical release writer.
          Generate rich, Markdown-formatted content for each of the following placeholders.

          **Rules:**
          - Output valid JSON with the following keys exactly:
            ["SHORT_TITLE", "SUMMARY", "FEATURE_GROUP", "DETAILS", "ENHANCEMENTS", "BUG_DESCRIPTIONS", "DOC_UPDATES"]
          - Each value can be multiline Markdown (with newlines and bullet lists).
          - Combine similar items into unified bullet sections when appropriate.
          - Be concise, factual, and use proper Markdown syntax.
          - Do NOT include code fences or backticks in the JSON values.
          - Focus on clarity, developer insight, and impact.
          - Your goal: a professional, public GitHub release.
          - Analyze the actual code changes in the diff to understand what was modified, not just the commit messages.

          Context:
          Version: {tag}
          Commit messages:
          {commits}

          Code changes (full diff):
          {diff}

          Example (simplified JSON shape):
          {{
            "SHORT_TITLE": "Initial Alpha",
            "SUMMARY": "Introduces the first stable foundation for automated releases.",
            "FEATURE_GROUP": "AI Release System",
            "DETAILS": "- Integrated OpenAI API for release note generation\\n- Added automated workflow triggers",
            "ENHANCEMENTS": "- Refactored pipeline structure\\n- Improved reliability of tagging logic",
            "BUG_DESCRIPTIONS": "- Fixed incorrect env propagation\\n- Resolved crash in release script",
            "DOC_UPDATES": "- Added developer setup guide\\n- Documented CI process"
          }}
          """

          resp = client.chat.completions.create(
              model="gpt-4o-mini",
              messages=[
                  {"role": "system", "content": "You produce structured JSON for software release notes."},
                  {"role": "user", "content": prompt},
              ],
          )

          text = resp.choices[0].message.content.strip()

          # Basic JSON cleanup (removes Markdown fences if the model adds them)
          text = text.replace('```json', '').replace('```', '').strip()

          data = json.loads(text)

          # Write each key into env file for GitHub Actions
          with open(os.getenv("GITHUB_ENV"), "a") as envfile:
              for key, value in data.items():
                  value = value.replace("%", "%%")  # avoid sed expansion issues
                  envfile.write(f"{key}<<EOF\n{value}\nEOF\n")
          PYCODE

      # ==============================================================
      # STEP 2: Substitute the placeholders with AI output
      # ==============================================================

      - name: Populate template with AI output (multiline safe)
        id: populate
        run: |
          set -Eeuo pipefail
          cp .github/RELEASE_TEMPLATE.md release_notes.md

          awk -v VERSION="$VERSION" \
              -v SHORT_TITLE="$SHORT_TITLE" \
              -v SUMMARY="$SUMMARY" \
              -v FEATURE_GROUP="$FEATURE_GROUP" \
              -v DETAILS="$DETAILS" \
              -v ENHANCEMENTS="$ENHANCEMENTS" \
              -v BUG_DESCRIPTIONS="$BUG_DESCRIPTIONS" \
              -v DOC_UPDATES="$DOC_UPDATES" '
              {
                gsub(/\{\{VERSION\}\}/, VERSION);
                gsub(/\{\{SHORT_TITLE\}\}/, SHORT_TITLE);
                gsub(/\{\{SUMMARY\}\}/, SUMMARY);
                gsub(/\{\{FEATURE_GROUP\}\}/, FEATURE_GROUP);
                gsub(/\{\{DETAILS\}\}/, DETAILS);
                gsub(/\{\{ENHANCEMENTS\}\}/, ENHANCEMENTS);
                gsub(/\{\{BUG_DESCRIPTIONS\}\}/, BUG_DESCRIPTIONS);
                gsub(/\{\{DOC_UPDATES\}\}/, DOC_UPDATES);
                print;
              }' release_notes.md > release_notes_filled.md

          mv release_notes_filled.md release_notes.md


      # ==============================================================
      # STEP 3: Publish Release
      # ==============================================================

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: release_notes.md
          draft: false
          prerelease: false

  # ==============================================================
  # STEP 4: Reset Workflow
  # ==============================================================

  reset_placeholders:
    runs-on: ubuntu-latest
    needs: release
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Restore placeholder workflow
        run: |
          set -Eeuo pipefail
          git fetch origin main
          git checkout origin/main -- .github/workflows/auto-release.yml || true
          echo "âœ“ Workflow restored to placeholder defaults."

      - name: Commit and push reset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if [ -n "$(git status --porcelain)" ]; then
            git add .github/workflows/auto-release.yml
            git commit -m "Reset auto-release.yml to placeholder defaults"
            git push origin HEAD:main
          else
            echo "No workflow changes to reset."
          fi
